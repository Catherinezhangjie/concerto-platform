{
    "version": "5.0.beta.9.1",
    "collection": [
        {
            "class_name": "Test",
            "id": 74,
            "name": "_dataManipulation",
            "accessibility": 0,
            "archived": "0",
            "visibility": 2,
            "type": 0,
            "code": "getWhereClause = function(where, type) {\n  if((is.na(where) || where == \"\") && type != \"update\") {\n    elems = NULL\n    for(name in .dynamicInputs) {\n      elem = concerto.table.insertParams(\"{{name}}='{{value}}'\", list(\n        name=name,\n        value=get(name)\n      ))\n      elems = c(elems, elem)\n    }\n    if(length(elems) > 0) {\n      elemsJoined = paste(elems, collapse=\" AND \")\n      return(paste0(\"WHERE \", elemsJoined))\n    }\n  } else if(length(where) == 1) {\n    id = suppressWarnings(as.numeric(where))\n    if(is.character(where) && is.na(id)) {\n      params = list()\n      for(name in .dynamicInputs) {\n        params[[name]] = get(name)\n      }\n      elemsJoined = concerto.table.insertParams(where, params)\n      return(paste0(\"WHERE \", elemsJoined))\n    } else if(is.numeric(id)) {\n      return(paste0(\"WHERE id=\",where))\n    }\n  }\n  return(NULL)\n}\n    \ngetSetClause = function(set, type) {\n  if(is.na(set) || set == \"\") {\n    if(type == \"insert\") {\n      cols = NULL\n      vals = NULL\n      for(name in .dynamicInputs) {\n        cols = c(cols, name)\n        val = concerto.table.insertParams(\"'{{value}}'\", list(\n          value=get(name)\n        ))\n        vals = c(vals, val)\n      }\n      if(length(cols) > 0) {\n        colsJoined = paste(cols, collapse=\", \")\n        valsJoined = paste(vals, collapse=\", \")\n        return(paste0(\"(\",colsJoined,\") VALUES (\",valsJoined,\")\"))\n      }\n    } else {\n      elems = NULL\n      for(name in .dynamicInputs) {\n        elem = concerto.table.insertParams(\"{{name}}='{{value}}'\", list(\n          name=name,\n          value=get(name)\n        ))\n        elems = c(elems, elem)\n      }\n      if(length(elems) > 0) {\n        elemsJoined = paste(elems, collapse=\", \")\n        return(paste0(\"SET \", elemsJoined))\n      }\n    }\n  } else if(length(set) == 1 && is.character(set)) {\n    params = list()\n    for(name in .dynamicInputs) {\n      params[[name]] = get(name)\n    }\n    elemsJoined = concerto.table.insertParams(set, params)\n    return(paste0(\"SET \", elemsJoined))\n  }\n  return(NULL)\n}\n  \ngetCustomQuery = function(queryString) {\n  params = list()\n  for(name in .dynamicInputs) {\n    params[[name]] = get(name)\n  }\n  queryString = concerto.table.insertParams(queryString, params)\n  return(queryString)\n}\n\nresult = NULL\nif(queryType == \"select\") {\n  queryString = \"SELECT * FROM {{table}}\"\n  whereString = getWhereClause(whereClause, queryType)\n  if(!is.null(whereString)) {\n    queryString = paste0(queryString, \" \", whereString)\n  }\n  result = concerto.table.query(queryString, params=list(\n    table=table\n  ))\n} else if(queryType == \"insert\") {\n  queryString = \"INSERT INTO {{table}}\"\n  setString = getSetClause(setClause, queryType)\n  if(!is.null(setString)) {\n    queryString = paste0(queryString, \" \", setString)\n  }\n  result = concerto.table.query(queryString, params=list(\n    table=table\n  ))\n} else if(queryType == \"update\") {\n  queryString = \"UPDATE {{table}}\"\n  setString = getSetClause(setClause, queryType)\n  if(!is.null(setString)) {\n    queryString = paste0(queryString, \" \", setString)\n  } else {\n    stop(\"No 'set' clause for UPDATE query\")\n  }\n  whereString = getWhereClause(whereClause, queryType)\n  if(!is.null(whereString)) {\n    queryString = paste0(queryString, \" \", whereString)\n  }\n  result = concerto.table.query(queryString, params=list(\n    table=table\n  ))\n} else if(queryType == \"delete\") {\n  queryString = \"DELETE FROM {{table}}\"\n  whereString = getWhereClause(whereClause, queryType)\n  if(!is.null(whereString)) {\n    queryString = paste0(queryString, \" \", whereString)\n  }\n  result = concerto.table.query(queryString, params=list(\n    table=table\n  ))\n} else {\n  queryString = getCustomQuery(queryString)\n  result = concerto.table.query(queryString)\n}",
            "outdated": "0",
            "description": "",
            "variables": [
                {
                    "class_name": "TestVariable",
                    "id": 784,
                    "name": "out",
                    "type": 2,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 74,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 785,
                    "name": "queryType",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 74,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 786,
                    "name": "queryString",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 74,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 788,
                    "name": "result",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 74,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 789,
                    "name": "table",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 74,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 790,
                    "name": "whereClause",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 74,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 791,
                    "name": "setClause",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 74,
                    "parentVariable": null
                }
            ],
            "sourceWizard": null,
            "sourceWizardName": null,
            "sourceWizardTest": null,
            "sourceWizardTestName": null,
            "updatedOn": "2019-02-11 13:04:14",
            "updatedBy": "admin",
            "nodes": [],
            "nodesConnections": [],
            "tags": "",
            "owner": null,
            "groups": "",
            "starterContent": true,
            "hash": "e8fbcc851ae3562c759e91fa0856958bb00c9331"
        }
    ]
}