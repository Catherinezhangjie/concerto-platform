{
    "version": "5.0.beta.9.1",
    "collection": [
        {
            "class_name": "Test",
            "id": 74,
            "name": "_dataManipulation",
            "accessibility": 0,
            "archived": "0",
            "visibility": 2,
            "type": 0,
            "code": "getWhereClause = function(where, type) {\n  if((is.na(where) || where == \"\") && type != \"update\") {\n    elems = NULL\n    for(name in .dynamicInputs) {\n      elem = concerto.table.insertParams(\"{{name}}='{{value}}'\", list(\n        name=name,\n        value=get(name)\n      ))\n      elems = c(elems, elem)\n    }\n    if(length(elems) > 0) {\n      elemsJoined = paste(elems, collapse=\" AND \")\n      return(paste0(\"WHERE \", elemsJoined))\n    }\n  } else if(length(where) == 1) {\n    id = suppressWarnings(as.numeric(where))\n    if(is.character(where) && is.na(id)) {\n      params = list()\n      for(name in .dynamicInputs) {\n        params[[name]] = get(name)\n      }\n      elemsJoined = concerto.table.insertParams(where, params)\n      return(paste0(\"WHERE \", elemsJoined))\n    } else if(is.numeric(id)) {\n      return(paste0(\"WHERE id=\",where))\n    }\n  }\n  return(NULL)\n}\n    \ngetSetClause = function(set, type) {\n  if(is.na(set) || set == \"\") {\n    if(type == \"insert\") {\n      cols = NULL\n      vals = NULL\n      for(name in .dynamicInputs) {\n        cols = c(cols, name)\n        val = concerto.table.insertParams(\"'{{value}}'\", list(\n          value=get(name)\n        ))\n        vals = c(vals, val)\n      }\n      if(length(cols) > 0) {\n        colsJoined = paste(cols, collapse=\", \")\n        valsJoined = paste(vals, collapse=\", \")\n        return(paste0(\"(\",colsJoined,\") VALUES (\",valsJoined,\")\"))\n      }\n    } else {\n      elems = NULL\n      for(name in .dynamicInputs) {\n        elem = concerto.table.insertParams(\"{{name}}='{{value}}'\", list(\n          name=name,\n          value=get(name)\n        ))\n        elems = c(elems, elem)\n      }\n      if(length(elems) > 0) {\n        elemsJoined = paste(elems, collapse=\", \")\n        return(paste0(\"SET \", elemsJoined))\n      }\n    }\n  } else if(length(set) == 1 && is.character(set)) {\n    params = list()\n    for(name in .dynamicInputs) {\n      params[[name]] = get(name)\n    }\n    elemsJoined = concerto.table.insertParams(set, params)\n    return(paste0(\"SET \", elemsJoined))\n  }\n  return(NULL)\n}\n  \ngetCustomQuery = function(queryString) {\n  params = list()\n  for(name in .dynamicInputs) {\n    params[[name]] = get(name)\n  }\n  queryString = concerto.table.insertParams(queryString, params)\n  return(queryString)\n}\n\nresult = NULL\nif(queryType == \"select\") {\n  queryString = \"SELECT * FROM {{table}}\"\n  whereString = getWhereClause(whereClause, queryType)\n  if(!is.null(whereString)) {\n    queryString = paste0(queryString, \" \", whereString)\n  }\n  result = concerto.table.query(queryString, params=list(\n    table=table\n  ))\n} else if(queryType == \"insert\") {\n  queryString = \"INSERT INTO {{table}}\"\n  setString = getSetClause(setClause, queryType)\n  if(!is.null(setString)) {\n    queryString = paste0(queryString, \" \", setString)\n  }\n  result = concerto.table.query(queryString, params=list(\n    table=table\n  ))\n} else if(queryType == \"update\") {\n  queryString = \"UPDATE {{table}}\"\n  setString = getSetClause(setClause, queryType)\n  if(!is.null(setString)) {\n    queryString = paste0(queryString, \" \", setString)\n  } else {\n    stop(\"No 'set' clause for UPDATE query\")\n  }\n  whereString = getWhereClause(whereClause, queryType)\n  if(!is.null(whereString)) {\n    queryString = paste0(queryString, \" \", whereString)\n  }\n  result = concerto.table.query(queryString, params=list(\n    table=table\n  ))\n} else if(queryType == \"delete\") {\n  queryString = \"DELETE FROM {{table}}\"\n  whereString = getWhereClause(whereClause, queryType)\n  if(!is.null(whereString)) {\n    queryString = paste0(queryString, \" \", whereString)\n  }\n  result = concerto.table.query(queryString, params=list(\n    table=table\n  ))\n} else {\n  queryString = getCustomQuery(queryString)\n  result = concerto.table.query(queryString)\n}",
            "outdated": "0",
            "description": "",
            "variables": [
                {
                    "class_name": "TestVariable",
                    "id": 784,
                    "name": "out",
                    "type": 2,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 74,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 785,
                    "name": "queryType",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 74,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 786,
                    "name": "queryString",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 74,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 788,
                    "name": "result",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 74,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 789,
                    "name": "table",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 74,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 790,
                    "name": "whereClause",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 74,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 791,
                    "name": "setClause",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 74,
                    "parentVariable": null
                }
            ],
            "sourceWizard": null,
            "sourceWizardName": null,
            "sourceWizardTest": null,
            "sourceWizardTestName": null,
            "updatedOn": "2019-02-11 13:04:14",
            "updatedBy": "admin",
            "nodes": [],
            "nodesConnections": [],
            "tags": "",
            "owner": null,
            "groups": "",
            "starterContent": true,
            "hash": "e8fbcc851ae3562c759e91fa0856958bb00c9331"
        },
        {
            "class_name": "TestWizard",
            "id": 15,
            "name": "dataManipulation",
            "description": "",
            "accessibility": 0,
            "archived": "0",
            "steps": [
                {
                    "class_name": "TestWizardStep",
                    "id": 30,
                    "title": "Data",
                    "description": "",
                    "orderNum": 0,
                    "colsNum": 0,
                    "wizard": 15,
                    "params": [
                        {
                            "class_name": "TestWizardParam",
                            "id": 98,
                            "label": "Query type",
                            "description": "<p>Type of query. One of following:<\/p>\n\n<ul>\n\t<li><strong>Select&nbsp;<\/strong>- reads data from table<\/li>\n\t<li><strong>Update&nbsp;<\/strong>- updates existing data in table<\/li>\n\t<li><strong>Insert&nbsp;<\/strong>- inserts new data to table<\/li>\n\t<li><strong>Delete&nbsp;<\/strong>- deletes existing data from table<\/li>\n\t<li><strong>Custom&nbsp;<\/strong>- custom query<\/li>\n<\/ul>\n",
                            "hideCondition": "",
                            "type": 3,
                            "passableThroughUrl": "0",
                            "value": "select",
                            "testVariable": 785,
                            "name": "queryType",
                            "wizardStep": 30,
                            "stepTitle": "Data",
                            "order": 0,
                            "wizard": 15,
                            "definition": {
                                "placeholder": 0,
                                "options": [
                                    {
                                        "value": "select",
                                        "label": "Select",
                                        "order": 0
                                    },
                                    {
                                        "value": "update",
                                        "label": "Update",
                                        "order": 1
                                    },
                                    {
                                        "value": "delete",
                                        "label": "Delete",
                                        "order": 3
                                    },
                                    {
                                        "value": "custom",
                                        "label": "Custom",
                                        "order": 4
                                    },
                                    {
                                        "value": "insert",
                                        "label": "Insert",
                                        "order": 2
                                    }
                                ],
                                "defvalue": "select"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 99,
                            "label": "Table",
                            "description": "Table to run query on.",
                            "hideCondition": "values.queryType == \"custom\"",
                            "type": 6,
                            "passableThroughUrl": "0",
                            "value": "",
                            "testVariable": 789,
                            "name": "table",
                            "wizardStep": 30,
                            "stepTitle": "Data",
                            "order": 0,
                            "wizard": 15,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": ""
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 100,
                            "label": "Query",
                            "description": "Custom query. Can use insert directives that will be replaced with dynamic input values.",
                            "hideCondition": "values.queryType != \"custom\"",
                            "type": 1,
                            "passableThroughUrl": "0",
                            "value": "",
                            "testVariable": 786,
                            "name": "queryString",
                            "wizardStep": 30,
                            "stepTitle": "Data",
                            "order": 0,
                            "wizard": 15,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": ""
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 101,
                            "label": "Set clause",
                            "description": "<ul>\n\t<li>if is string (<strong>Insert<\/strong>,&nbsp;<strong>Update<\/strong> only), will be used literally and replace any insert directives with dynamic inputs from node, e.g.:<br \/>\n\t<strong>column1={{column1Value}} AND column2={{column2Value}}<\/strong><\/li>\n\t<li>if empty (<strong>Insert<\/strong>&nbsp;only), will build clause from dynamic inputs, using &#39;<b>=<\/b>&#39;<b>&nbsp;<\/b>and &#39;<b>AND<\/b>&#39;<b>&nbsp;<\/b>operators, e.g. for dynamic inputs:&nbsp;<strong>col1=2<\/strong>,&nbsp;<strong>col2=3:<\/strong><br \/>\n\t<strong>(col1,col2) VALUES (2,3)<\/strong><\/li>\n\t<li>if empty (<b>Update&nbsp;<\/b>only), will build set clause from dynamic inputs, using &#39;<b>=<\/b>&#39;<b>&nbsp;<\/b>and &#39;<b>AND<\/b>&#39;<b>&nbsp;<\/b>operators, e.g. for dynamic inputs:&nbsp;<strong>col1=2<\/strong>,&nbsp;<strong>col2=3:<\/strong><br \/>\n\t<strong>col1=2, col2=3<\/strong><\/li>\n<\/ul>\n",
                            "hideCondition": "values.queryType == \"select\"",
                            "type": 1,
                            "passableThroughUrl": "0",
                            "value": "",
                            "testVariable": 791,
                            "name": "setClause",
                            "wizardStep": 30,
                            "stepTitle": "Data",
                            "order": 0,
                            "wizard": 15,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": ""
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 102,
                            "label": "Where clause",
                            "description": "<ul>\n\t<li>if is string (<strong>Select<\/strong>,&nbsp;<strong>Delete<\/strong> only), will be used literally and replace any insert directives with dynamic inputs from node, e.g.:<br \/>\n\t<strong>column1={{column1Value}} AND column2={{column2Value}}<\/strong><\/li>\n\t<li>if numeric, e.g.:<br \/>\n\t<strong>23<\/strong><br \/>\n\twill be converted to:<br \/>\n\t<strong>id=23<\/strong><\/li>\n\t<li>if empty, will build where clause from dynamic inputs, using &#39;<b>=<\/b>&#39;<b>&nbsp;<\/b>and &#39;<b>AND<\/b>&#39;<b>&nbsp;<\/b>operators, e.g. for dyanmic inputs:&nbsp;<strong>col1=2<\/strong>,&nbsp;<strong>col2=3:<\/strong><br \/>\n\t<strong>col1=2 AND col2=3<\/strong><\/li>\n<\/ul>\n",
                            "hideCondition": "values.queryType == \"insert\"",
                            "type": 1,
                            "passableThroughUrl": "0",
                            "value": "",
                            "testVariable": 790,
                            "name": "whereClause",
                            "wizardStep": 30,
                            "stepTitle": "Data",
                            "order": 0,
                            "wizard": 15,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": ""
                            }
                        }
                    ]
                }
            ],
            "test": 74,
            "testName": "_dataManipulation",
            "updatedOn": "2019-02-06 17:02:19",
            "updatedBy": "admin",
            "owner": null,
            "groups": "",
            "starterContent": true,
            "hash": "a1bfc20f4861f9fae563a12f1ac558512a143433"
        }
    ]
}